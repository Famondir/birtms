map_alpha2 <- c(rep(0:1, each = 5))
map_alpha3 <-  rbinom(n = n_items, size = 1, prob = .5)
map_alpha <- tibble(alpha1 = map_alpha1, alpha2 = map_alpha2, alpha3 = map_alpha3)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
alphas <- map_alpha*alphapars %>% exp()
alphas <- map_alpha*alphapars %>% exp() %>% mutate(alpha2 = 0, alpha3 = 0)
map_alpha1 <- c(rep(1, 10))
map_alpha2 <- c(rep(0:1, each = 5))
map_alpha3 <-  rbinom(n = n_items, size = 1, prob = .5)
map_alpha <- tibble(alpha1 = map_alpha1, alpha2 = map_alpha2, alpha3 = map_alpha3)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
item_distributions <- tibble(beta = 2, logalpha1 = 0.5, logalpha2 = 1, logalpha3 = 0.6) %>%
simulate_normal_distributions(n = n_items)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
alphas <- map_alpha*alphapars %>% exp() %>% mutate(alpha2 = 0, alpha3 = 0)
map_alpha*alphapars
map_alpha*alphapars %>% exp()
map_alpha*alphapars %>% exp() %>% mutate(alpha2 = 0, alpha3 = 0)
alphas <- map_alpha*alphapars %>% exp() %>% mutate(alpha2 = c(rep(0,10)), alpha3 = c(rep(0,10)))
alphas <- map_alpha*alphapars %>% exp()
alphas$alpha2 <- 0
alphas$alpha3 <- 0
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:10), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = factor(alpha1),
map_alpha2 = factor(alpha2),
map_alpha3 = factor(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:10), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),
map_alpha2 = factor(alpha2),
map_alpha3 = factor(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
fit_3PL_3D_guess_fixed_25_theta_1
formula <- bf(
response ~ beta + map_alpha1 * theta1,
nl = TRUE,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
make_stancode(formula, irt_data)
fit_1PL_1D_nonlin_noguess_map_bigthetaSD_2
fit_1PL_1D_nonlin_noguess_bigthetaSD_2
fit_1PL_1D_nonlin_noguess_map_thetaSD1
alphas <- map_alpha*alphapars %>% exp()
# alphas$alpha2 <- 0
# alphas$alpha3 <- 0
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
# toc()
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:10), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
gamma <-  .0
map_alpha1 <- c(rep(1, 10))
map_alpha2 <- c(rep(0:1, each = 5))
map_alpha3 <-  rbinom(n = n_items, size = 1, prob = .5)
map_alpha <- tibble(alpha1 = map_alpha1, alpha2 = map_alpha2, alpha3 = map_alpha3)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
alphas <- map_alpha*alphapars %>% exp()
# alphas$alpha2 <- 0
# alphas$alpha3 <- 0
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
# toc()
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:10), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
View(alphas)
map_alpha1 <- c(rep(1:0, each = 5))
map_alpha <- tibble(alpha1 = map_alpha1, alpha2 = map_alpha2, alpha3 = map_alpha3)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
alphas <- map_alpha*alphapars %>% exp()
# alphas$alpha2 <- 0
# alphas$alpha3 <- 0
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
# toc()
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:10), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
fit_2PL_3D
map(item_distributions, sd)
map(alphapars*map_alpha, sd)
map(alphapars*map_alpha, mean)
map(item_distributions, mean)
n_items <- 20
item_distributions <- tibble(beta = 2, logalpha1 = 0.5, logalpha2 = 1, logalpha3 = 0.6) %>%
simulate_normal_distributions(n = n_items)
gamma <-  .0
map_alpha1 <- c(rep(1:0, each = 10))
map_alpha2 <- c(rep(0:1, each = 10))
map_alpha3 <-  rbinom(n = n_items, size = 1, prob = .5)
map_alpha <- tibble(alpha1 = map_alpha1, alpha2 = map_alpha2, alpha3 = map_alpha3)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
alphas <- map_alpha*alphapars %>% exp()
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:10), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),# m端ssen integer nicht factors sein!
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:n_items), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),# m端ssen integer nicht factors sein!
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
map_alpha3 <- c(rep(0:1, 10))
map_alpha <- tibble(alpha1 = map_alpha1, alpha2 = map_alpha2, alpha3 = map_alpha3)
alphapars <- item_distributions %>% select(logalpha1:logalpha3)
alphas <- map_alpha*alphapars %>% exp()
map(alphapars*map_alpha, sd)
map(alphapars*map_alpha, mean)
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:n_items), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),# m端ssen integer nicht factors sein!
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
lobstr::ast(!x %in% y)
install.packages("lobstr")
lobstr::ast(!x %in% y)
lobstr::ast(!(x %in% y)
)
lobstr::ast((!x) %in% y)
fit_2PL_3D_20items2
map(item_distributions, sd)
map(item_distributions, mean)
map(map_alpha*alphapars, mean)
map(map_alpha*alphapars, sd)
fit_2PL_3D
fit_2PL_3D_20items_wrong_SDtheta2_2
fit_2PL_3D_20items2
map(thetas, sd)
thetas <- tibble(theta1 = 1, theta2 = 1, theta3 = 1) %>%
simulate_normal_distributions(n = 1000)
map(thetas, sd)
# tic()
probabilities <- map2(alphas, thetas, ~.x %*% t(.y)) %>%
reduce(`+`) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
add(item_distributions$beta) %>%
inv_logit_scaled %>%
multiply_by(1 - gamma) %>%
add(gamma)
# toc()
len <- nrow(probabilities)
responses <- probabilities %>% map(~rbinom(n = len, size = 1, prob = .)) %>%
as_tibble() %>% setNames(c(paste0('p', c(1:1000)))) %>%
mutate(item = paste0('i', 1:n_items), .before = 1) %>%
cbind(map_alpha) %>% mutate(map_alpha1 = as.integer(alpha1),# m端ssen integer nicht factors sein!
map_alpha2 = as.integer(alpha2),
map_alpha3 = as.integer(alpha3),
.before = 2) %>%
select(-c(alpha1, alpha2, alpha3))
irt_data <- responses %>% pivot_longer(cols = !c('item', 'map_alpha1', 'map_alpha2', 'map_alpha3'),
names_to = 'person', values_to = 'response')
saveRDS(irt_data, 'irt_data.RDS')
map(thetas, mean)
ranef(fit_2PL_3D_20items2)$item
fit_2PL_3D_20items_theta3D_freeThetaSD
fit_2PL_3D_20items_theta3D
map(map_alpha*alphapars)
map(map_alpha*alphapars, sd)
fit_2PL_3D_20items_theta3D_all_freeThetaSD
ranef(fit_2PL_3D_20items_theta3D_all_freeThetaSD)$item
fit_2PL_3D_20items_theta3D
loo(fit_2PL_3D_20items_theta3D)
fit_2PL_3D_20items_theta3D
loo(fit_2PL_3D_20items_theta3D)
formula <- bf(
response ~ beta + theta1
nl = TRUE,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
response ~ beta + theta1,
nl = TRUE,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
f <- expr(response ~ beta + theta1)
f
formula <- bf(
f,
nl = TRUE,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
!!f,
nl = TRUE,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
iter = 1000
fit_1PL_1D <- brm(formula = formula,
data = irt_data,
prior = prior,
chains = 2,
iter = iter,
warmup = 500,
cores = 2,
refresh = max(1, iter/100)
)
fit_1PL_1D <- brm(formula = formula,
data = irt_data,
chains = 2,
iter = iter,
warmup = 500,
cores = 2,
refresh = max(1, iter/100)
)
fit_1PL_1D
fit_1PL_1D_expr
f <- exprs(response ~ beta + theta1, nl = TRUE)
library(rlang)
f <- exprs(response ~ beta + theta1, nl = TRUE)
formula <- bf(
f,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
!!!f,
theta1 ~ 0 + (1| person),
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
f
f <- exprs(response ~ beta + theta1, theta1 ~ 0 + (1| person))
formula <- bf(
!!!f,
nl = TRUE,
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
f,
nl = TRUE,
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
UQS(f),
nl = TRUE,
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
f <- exprs(response ~ beta + theta1, theta1 ~ 0 + (1| person))
f
formula <- bf(
f[[1]],
f[[2]],
nl = TRUE,
beta ~ 1 + (1 | item),
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
f[[1]],
f[[2]],
nl = TRUE,
'beta ~ 1 + (1 | item)',
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
flist = f,
nl = TRUE,
'beta ~ 1 + (1 | item)',
family = brmsfamily("bernoulli", link = "logit")
)
f <- exprs(response ~ beta + theta1, nl = TRUE, theta1 ~ 0 + (1| person))
formula <- bf(
flist = f,
'beta ~ 1 + (1 | item)',
family = brmsfamily("bernoulli", link = "logit")
)
exp('nl = TRUE')
sym('nl = TRUE')
sym(nl = TRUE)
f <- exprs(response ~ beta + theta1, sym('nl = TRUE'), theta1 ~ 0 + (1| person))
f
f <- exprs(response ~ beta + theta1, !!sym('nl = TRUE'), theta1 ~ 0 + (1| person))
f
f <- exprs(response ~ beta + theta1, 'nl = TRUE', theta1 ~ 0 + (1| person))
f
# f <- expr()
f_list <- exprs(response ~ beta + theta1, theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
exp(f_list[[1]] + gamma)
exp(!!f_list[[1]] + gamma)
exp(alpha + gamma)
fit_1PL_1D_expr_list
fit_1PL_1D_expr_list2
f <- expr(response ~ beta + theta1)
library(lobstr)
ast(f)
expr_print(f
)
exp(!!f + gamma)
exp(!!f
)
exp(!!f)
library(rlang)
exp(!!f)
exp(f)
expr(f)
expr(!!f)
expr(!!f + gamma)
update.formula(!!f, ~ . + x2)
update.formula(f, ~ . + x2)
f
fit_1PL_1D_expr_list3
f2 <- update.formula(f, ~ . + x2)
formula <- bf(
f2
nl = TRUE,
flist = f_list[-1],
family = brmsfamily("bernoulli", link = "logit")
)
formula <- bf(
f2,
nl = TRUE,
family = brmsfamily("bernoulli", link = "logit")
)
`+`.formula
expr_print(f)
f[[1]]
f[[2]]
f[[3]]
f[[3]][[1]]
ast(f
)
ast(!!f)
exp(thetas$theta1hist()))
exp(thetas$theta1hist())
hist(exp(thetas$theta1))
dist(exp(thetas$theta1))
density(exp(thetas$theta1))
hist(abs(thetas$theta1))
local2 <- function(expr) {
env <- env(caller_env())
eval(enexpr(expr), env)
}
foo <- local2({
x <- 10
y <- 200
x + y
})
foo
expr({
x <- 10
y <- 200
x + y
})
exprs({
x <- 10
y <- 200
x + y
})
exprs({
x <- 10
y <- 200
nl = TRUE
x + y
})
expr({
x <- 10
y <- 200
nl = TRUE
x + y
})
exprs({
x <- 10
y <- 200
nl = TRUE
x + y,
x+y
})
exprs({
x <- 10
y <- 200
nl = TRUE
x + y
}
x+y)
exprs({
x <- 10
y <- 200
nl = TRUE
x + y
},
x+y)
f_list <- exprs({response ~ beta + theta1, nl = TRUE}, theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
f_list <- exprs({response ~ beta + theta1
nl = TRUE}, theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
flist
f_list
f_list <- exprs(response ~ beta + theta1, {nl = TRUE}, theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
f_list
f_list <- exprs(response ~ beta + theta1, nl = TRUE, theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
f_list
f_list <- exprs(response ~ beta + theta1, nl := TRUE, theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
f_list
f_list <- exprs(response ~ beta + theta1, (nl = TRUE), theta1 ~ 0 + (1| person), beta ~ 1 + (1 | item))
f_list
`<-`(nl, TRUE)
expr(`<-`(nl, TRUE))
expr(`=`(nl, TRUE))
